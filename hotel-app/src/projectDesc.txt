------------ Hotel Reservation --------------------
1. Create Reservation (C) -create
2. List Reservation   (R) - read
3. Edit Reservation   (U) -update
4. Delete Reservation (D) -delete 

--- CRUD operations --- 
Create, Read, Update, Delete 


=================== Project Architecture Hotel App ================== 

                -------------->ReservationForm Component |
                |                                        |    <---> Reservation Service                    
App Root --> Router(outlet) -->ReservationList Component |
                |
                ------>Home Component



==========================================

Reactive Form Validation --> Validate form in Typescript Class
Template Driven Form Validation --> Validate form in HTML template 





============================================
ng g module home
ng g c home --module=home 

ng g module reservation
ng g c reservation-form --module=reservation
ng g c reservation-list --module=reservation
ng g service reservation/reservation (creating service inside reservation module)

ng g interface models/reservation

npm i bootstrap@5.3    --> In styles.css --> @import "bootstrap/dist/css/bootstrap.min.css";



===============================================================================================
MODERN WEB ARCHITECTURE 
 


                      HTTP RESPONSE             
                         +code <------------------|           
 FRONTEND APPLICATION <-------------- BackEnd Application + RESTful API                       
 (Angular,React, etc)                                   ^
                      --------------->                  |
                      HTTP REQUEST                      |
                                                        |
                                                        v 
                                                     DATBASE
                                                  (SQL or NoSQL)   


HTTP REQUEST TYPES 
1. GET      2. POST(CREATE)     3. DELETE      4. PUT(UPDATE)

HTTP Response TYPES 
1. 2xx - OK (Successful)
2. 3xx - Redirection
3. 4xx - Client Errors
4. 5xx - Server Errors 


====================================================================
In this project/application --> We are using MOCKOON as a backend API 
MOCKOON ---> mockoon.com 


